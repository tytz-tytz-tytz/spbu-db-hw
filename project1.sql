-- Таблица категорий товаров
-- Хранит информацию о категориях товаров, включая требования по температуре и влажности хранения.
-- Пример: "Корма для собак", "Игрушки для кошек".
CREATE TABLE IF NOT EXISTS category (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100), -- название категории товара
    temper NUMRANGE CHECK (temper <@ '[-50,50]'), -- требования по температуре хранения
    wetness NUMRANGE CHECK (wetness <@ '[0,100]') DEFAULT '[40,60]' -- требования по влажности
);

-- Таблица зон хранения
-- Содержит информацию о различных зонах на складе, таких как холодильные камеры или сухие зоны.
-- Каждая зона имеет норму температуры и влажности, в которой должны храниться товары.
CREATE TABLE IF NOT EXISTS storage_zone (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100), -- наименование зоны
    temperature_range NUMRANGE CHECK (temperature_range IS NOT NULL AND temperature_range <@ '[-50, 50]'), -- Норма температуры
    wetness_range NUMRANGE CHECK (wetness_range IS NOT NULL AND wetness_range <@ '[0, 100]') -- Норма влажности
);

-- Таблица ячеек хранения
-- Каждый ячейка хранения на складе имеет уникальное местоположение и описывается зоной хранения, номером стеллажа и номером полки.
CREATE TABLE IF NOT EXISTS storage_sale (
    id SERIAL PRIMARY KEY,
    storage_zone_id INT REFERENCES storage_zone(id), -- привязка к зоне хранения
    rack_number SMALLINT CHECK (rack_number BETWEEN 0 AND 1000), -- номер стеллажа
    shelf_number SMALLINT CHECK (shelf_number BETWEEN 0 AND 100) -- номер полки
);

-- Таблица товара в каталоге
-- Содержит данные о товарах в каталоге, такие как название, срок годности, бренд, состав и др.
CREATE TABLE IF NOT EXISTS catalog_product (
    id SERIAL PRIMARY KEY,
    product_name VARCHAR(100), -- наименование товара
    price NUMERIC CHECK (price >= 0), -- цена товара
    storage_life INT CHECK (storage_life BETWEEN 0 AND 3653), -- срок годности товара в днях
    method_of_using TEXT, -- инструкция по применению товара
    product_label VARCHAR(50), -- марка товара
    product_brand VARCHAR(50), -- бренд товара
    importer VARCHAR(50), -- импортер
    article_number VARCHAR(40), -- артикул товара
    category_id INT REFERENCES category(id), -- категория товара
    food_value INT CHECK (food_value BETWEEN 0 AND 2000), -- пищевая ценность
    ingredients TEXT[], -- состав
    caution TEXT[] -- предупреждения
);


-- Таблица поставщиков
-- Хранит информацию о поставщиках, которые предоставляют товары в магазин.
CREATE TABLE IF NOT EXISTS provider (
    id SERIAL PRIMARY KEY,
    provider_name VARCHAR(100), -- наименование поставщика
    address VARCHAR(200), -- адрес поставщика
    phone VARCHAR(20), -- телефон поставщика
    CONSTRAINT phone_check CHECK (phone ~ '^8\(\d{3}\)\d{3}-\d{2}-\d{2}$') -- работа только с РФ поставщиками
);

-- Таблица единиц товара из одной партии
-- Эта таблица отслеживает конкретные партии товара, опеределяемые штрих-кодом. 
CREATE TABLE IF NOT EXISTS product_unit (
    barcode VARCHAR(30) PRIMARY KEY, -- штрих-код товара
    catalog_id INT REFERENCES catalog_product(id), -- связь с товаром в каталоге
    date_production DATE, -- дата производства
    provider_id INT REFERENCES provider(id), -- поставщик
    lot_count SMALLINT, -- количество товара
    CONSTRAINT check_barcode_format CHECK (barcode ~ '^\d{8}$|^\d{12}$|^\d{13}$|^\d{14}$'),
    CONSTRAINT check_date_production CHECK (date_production <= CURRENT_DATE AND date_production >= CURRENT_DATE - INTERVAL '10 years')
);

-- Таблица продавцов
-- Хранит информацию о продавцах, которые работают в магазине и отвечают за продажи товаров.
CREATE TABLE IF NOT EXISTS seller (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL, -- Имя продавца
    last_name VARCHAR(50) NOT NULL, -- Фамилия продавца
    phone VARCHAR(20), -- Номер телефона
    email VARCHAR(100), -- Email продавца
    CONSTRAINT check_phone_format CHECK (phone ~ '^8\(\d{3}\)\d{3}-\d{2}-\d{2}$') -- проверка формата номера телефона
);

-- Создаем тип ENUM для переменной status
-- Этот тип перечисления используется для отслеживания статусов заказов у поставщиков.
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_status') THEN
        CREATE TYPE order_status AS ENUM ('Новый', 'Заказ отправлен', 'В пути', 'Доставлен');
    END IF;
END $$;

-- Таблица заказов у поставщика
-- Содержит информацию о заказах, сделанных у поставщиков. Каждый заказ может иметь несколько товаров.
CREATE TABLE IF NOT EXISTS purchase_order (
    id SERIAL PRIMARY KEY,
    seller_id INT REFERENCES seller(id), -- составитель заявки
    provider_id INT REFERENCES provider(id),
    date_of_request DATE DEFAULT CURRENT_DATE, -- дата заявки
    date_of_compilation DATE DEFAULT CURRENT_DATE, -- дата создания заявки
    date_of_delivery DATE, -- срок доставки
    order_comment TEXT,
    status order_status DEFAULT 'Новый' -- статус заявки
);

-- Таблица для содержимого заказа
-- Содержит информацию о товарах в рамках каждого заказа у поставщика.
CREATE TABLE IF NOT EXISTS purchase_order_detailed (
    purchase_id INT REFERENCES purchase_order(id) ON DELETE CASCADE, -- каскадное удаление при удалении заказа
    catalog_product_id INT REFERENCES catalog_product(id),
    quantity SMALLINT CHECK (quantity BETWEEN 1 AND 2000),
    PRIMARY KEY (purchase_id, catalog_product_id)
);


-- Таблица расположения товара
-- Содержит информацию о том, в каких ячейках хранения находятся конкретные товары и в каком количестве.
CREATE TABLE IF NOT EXISTS product_storage (
    id SERIAL PRIMARY KEY,
    product_unit_barcode VARCHAR(30) REFERENCES product_unit(barcode), -- ссылка на партию товара
    storage_sale_id INT REFERENCES storage_sale(id) ON DELETE CASCADE, -- ссылка на ячейку хранения
    quantity INT CHECK (quantity > 0), -- количество товара в ячейке
    CONSTRAINT unique_product_storage UNIQUE (product_unit_barcode, storage_sale_id) -- уникальное сочетание товара и ячейки
);

-- Таблица чеков продажи
-- Хранит информацию о продаже товаров в магазине, включая продавца и дату продажи.
CREATE TABLE IF NOT EXISTS sale_receipt (
    id SERIAL PRIMARY KEY,
    seller_id INT REFERENCES seller(id), -- кто провел продажу
    sale_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Дата и время продажи
);

-- Таблица содержимого чеков продажи
-- Отслеживает какие товары были проданы в рамках каждого чека, с указанием количества.
CREATE TABLE IF NOT EXISTS sale_receipt_details (
    id SERIAL PRIMARY KEY, -- Уникальный идентификатор записи
    receipt_id INT REFERENCES sale_receipt(id) ON DELETE CASCADE, -- Ссылка на чек продажи
    product_unit_barcode VARCHAR(30) REFERENCES product_unit(barcode) ON DELETE CASCADE, -- Ссылка на товар
    quantity INT CHECK (quantity > 0) -- Количество проданного товара
);

-- Таблица мониторинга температуры и влажности в зоне хранения
-- Содержит записи о текущей температуре и влажности в каждой зоне хранения товара на складе.
CREATE TABLE IF NOT EXISTS storage_zone_conditions (
    id SERIAL PRIMARY KEY,
    storage_zone_id INT REFERENCES storage_zone(id) ON DELETE CASCADE, -- Ссылка на зону хранения
    temperature NUMERIC CHECK (temperature BETWEEN -50 AND 50), -- Текущая температура (-50 до +50)
    wetness NUMERIC CHECK (wetness BETWEEN 0 AND 100), -- Текущая влажность (0% до 100%)
    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Время записи значения
);


-- Создание типа ENUM для переменной write_off_reason
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'write_off_reason_enum') THEN
        CREATE TYPE write_off_reason_enum AS ENUM (
            'Повреждение', 
            'Просрочка', 
            'Невостребованный', 
            'Ошибочный', 
            'Другие'
        );
    END IF;
END $$;

-- Таблица списания товара
-- Эта таблица используется для отслеживания случаев списания товара (например, по причине повреждения, просрочки и пр.).
-- Каждый случай списания связан с конкретной партией и указывается причина списания.
CREATE TABLE IF NOT EXISTS product_write_off (
    id SERIAL PRIMARY KEY, -- Уникальный идентификатор записи
    product_unit_barcode VARCHAR(30) REFERENCES product_unit(barcode), -- Штрих-код товара, который списывается
    quantity INT CHECK (quantity > 0), -- Количество списанного товара
    write_off_reason write_off_reason_enum, -- Причина списания (ENUM)
    write_off_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Дата и время списания
    recorded_by INT REFERENCES seller(id), -- Продавец или сотрудник, который осуществил списание
    storage_sale_id INT REFERENCES storage_sale(id) -- Ячейка хранения, откуда списан товар
);

----------------------------------------------

-- Заполнение данными:

-- Заполнение таблицы категорий товаров
INSERT INTO category (name, temper, wetness)
VALUES 
    ('Корм для собак', '[0, 25]', '[40, 60]'),
    ('Корм для кошек', '[0, 25]', '[40, 60]'),
    ('Игрушки для животных', '[0, 30]', '[30, 50]'),
    ('Лекарства для животных', '[2, 8]', '[50, 70]');

-- Заполнение таблицы зон хранения
INSERT INTO storage_zone (name, temperature_range, wetness_range)
VALUES 
    ('Склад зона 1', '[0, 25]', '[40, 60]'),
    ('Склад зона 2', '[0, 30]', '[30, 50]'),
    ('Склад зона 3', '[2, 8]', '[50, 70]'),
    ('Стойка продаж 1', '[0, 25]', '[40, 60]'),
    ('Стойка продаж 2', '[0, 30]', '[30, 50]'),
    ('Стойка продаж 3', '[2, 8]', '[50, 70]');

-- Заполнение таблицы ячеек хранения
INSERT INTO storage_sale (storage_zone_id, rack_number, shelf_number)
VALUES 
    (1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),
    (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2),
    (3, 1, 1), (3, 1, 2), (3, 2, 1), (3, 2, 2),
    (4, 1, 1), (4, 1, 2), (4, 2, 1),
    (5, 1, 1), (5, 1, 2), (5, 2, 1),
    (6, 1, 1), (6, 1, 2), (6, 2, 1);
 
-- Заполнение таблицы поставщиков
INSERT INTO provider (provider_name, address, phone)
VALUES 
    ('ООО "Зоотовары"', 'г. Москва, ул. Примерная, д. 10, офис 12', '8(495)123-45-67'),
    ('ЗАО "Корма и игрушки"', 'г. Санкт-Петербург, ул. Пушкинская, д. 5, офис 23', '8(812)987-65-43'),
    ('ИП "Ветпрепараты"', 'г. Казань, ул. Лекарственная, д. 7, офис 3', '8(843)222-33-44');

-- Заполнение таблицы товаров в каталоге
INSERT INTO catalog_product 
    (product_name, storage_life, method_of_using, product_label, product_brand, importer, 
     article_number, category_id, food_value, ingredients, caution, price)
VALUES 
    ('Собачий обед Папа-Говядина', 365, 'Рекомендация: 200 г на каждые 10 кг массы тела.', 
     'Папа-Говядина', 'DogFoodPro', 'ООО Зоотовары', 'DOG001', 1, 350, '{"Мясо", "Злаки", "Витамины"}', 
     '{"Беречь от влаги"}', 500),
    ('Злаковое счастье для собак', 365, 'Рекомендация: 150 г на каждые 10 кг массы тела.', 
     'Злаковое счастье', 'DogFoodPro', 'ООО Зоотовары', 'DOG002', 1, 300, '{"Злаки", "Витамины"}', 
     '{"Беречь от влаги"}', 450),
    ('Говяжий бунт для собак', 365, 'Рекомендация: 250 г на каждые 10 кг массы тела.', 
     'Говяжий бунт', 'PremiumDog', 'ООО Зоотовары', 'DOG003', 1, 400, '{"Говядина", "Злаки"}', 
     '{"Беречь от влаги"}', 520),
    ('Курица в обнимку с овощами', 365, 'Рекомендация: 220 г на каждые 10 кг массы тела.', 
     'Курица в обнимку', 'PremiumDog', 'ООО Зоотовары', 'DOG004', 1, 360, '{"Курица", "Овощи"}', 
     '{"Беречь от влаги"}', 480),
    ('Завтрак чемпиона для собак', 365, 'Рекомендация: 200 г на каждые 10 кг массы тела.', 
     'Завтрак чемпиона', 'DogPlus', 'ООО Зоотовары', 'DOG005', 1, 330, '{"Злаки", "Молочные добавки"}', 
     '{"Беречь от влаги"}', 460),
    ('Рыбный рай для кошек', 365, 'Рекомендация: 100 г в день для взрослой кошки.', 
     'Рыбный рай', 'CatFoodPlus', 'ЗАО Корма и игрушки', 'CAT001', 3, 300, '{"Рыба", "Злаки"}', 
     '{"Беречь от света"}', 550),
    ('Мясное изобилие для кошек', 365, 'Рекомендация: 100 г в день для взрослой кошки.', 
     'Мясное изобилие', 'CatFoodPlus', 'ЗАО Корма и игрушки', 'CAT002', 3, 350, '{"Мясо", "Витамины"}', 
     '{"Беречь от влаги"}', 600),
    ('Куриное лакомство для кошек', 365, 'Рекомендация: 120 г в день для взрослой кошки.', 
     'Куриное лакомство', 'CatFoodPlus', 'ЗАО Корма и игрушки', 'CAT003', 3, 320, '{"Курица", "Злаки"}', 
     '{"Беречь от влаги"}', 580),
    ('Гурман для котиков', 365, 'Рекомендация: 150 г в день для взрослой кошки.', 
     'Гурман', 'LuxuryCat', 'ЗАО Корма и игрушки', 'CAT004', 3, 400, '{"Рыба", "Овощи"}', 
     '{"Беречь от влаги"}', 620),
    ('Легкий обед для кошек', 365, 'Рекомендация: 100 г в день для взрослой кошки.', 
     'Легкий обед', 'LuxuryCat', 'ЗАО Корма и игрушки', 'CAT005', 3, 280, '{"Злаки", "Витамины"}', 
     '{"Беречь от влаги"}', 540),
    ('Мячик для мега-собак', 1095, 'Использовать под наблюдением.', 'Игры для собак', 
     'PetToys', 'ЗАО Корма и игрушки', 'TOY001', 3, NULL, '{"Пластик"}', '{"Беречь от мелких повреждений"}', 300),
    ('Мышка-приключение для кошек', 1095, 'Использовать под наблюдением.', 'Игры для кошек', 
     'PetToys', 'ЗАО Корма и игрушки', 'TOY002', 3, NULL, '{"Плюш", "Текстиль"}', '{"Беречь от огня"}', 350),
    ('Собачий канат силы', 1095, 'Использовать под наблюдением.', 'Игры для собак', 
     'PetToys', 'ЗАО Корма и игрушки', 'TOY003', 3, NULL, '{"Ткань", "Синтетика"}', 
     '{"Беречь от сильного растяжения"}', 400),
    ('Шарик с перьями для кошек', 1095, 'Использовать под наблюдением.', 'Игры для кошек', 
     'PetToys', 'ЗАО Корма и игрушки', 'TOY004', 3, NULL, '{"Пластик", "Перья"}', '{"Беречь от влаги"}', 320),
    ('Мягкая кость для собак', 1095, 'Использовать под наблюдением.', 'Игры для собак', 
     'PetToys', 'ЗАО Корма и игрушки', 'TOY005', 3, NULL, '{"Резина"}', 
     '{"Беречь от острых предметов"}', 360),
    ('ВетГельминт против глистов', 730, 'Давать животным согласно инструкции, 1 таблетка на 10 кг массы.', 
     'ВетГельминт', 'VetPharma', 'ООО ВетЛек', 'MED001', 4, NULL, '{"Празиквантел"}', 
     '{"Не применять для щенков младше 6 недель"}', 700),
    ('Витамины КэтВитал для кошек', 365, 'Добавлять в пищу 1 раз в день.', 'КэтВитал', 'PetHealth', 
     'ООО ЗдоровьеПет', 'MED002', 4, NULL, '{"Витамин A", "Витамин D", "Кальций"}', 
     '{"Хранить в сухом месте"}', 650),
    ('Антиблох-капли АнтиБлох', 180, 'Нанести 2-3 капли на холку животного.', 'АнтиБлох', 
     'BioProtection', 'ООО ЧистыйПитомец', 'MED003', 4, NULL, '{"Фипронил"}', 
     '{"Избегать попадания в глаза"}', 480),
    ('Суставы на 100% ЖивиАктив', 1095, 'Давать 2 таблетки в день для собак старше 7 лет.', 
     'ЖивиАктив', 'VetCare', 'ООО ВетЗабота', 'MED004', 4, NULL, '{"Глюкозамин", "Хондроитин"}', 
     '{"Не превышать дозировку"}', 900),
    ('Антибиотик ВетЦеф для здоровья', 365, 'Назначение по рецепту ветеринара.', 'ВетЦеф', 'AnimalPharma', 
     'ООО Зоолекарь', 'MED005', 4, NULL, '{"Цефалексин"}', '{"Хранить в прохладном месте"}', 1000);


-- Заполнение таблицы партий товаров
INSERT INTO product_unit (barcode, catalog_id, date_production, provider_id, lot_count)
VALUES
('1234567890001', 1, '2024-01-05', 1, 100),
('1234567890002', 1, '2024-02-10', 1, 150),
('1234567890003', 1, '2024-03-15', 1, 200),
('1234567890004', 1, '2024-04-20', 1, 100),
('1234567890011', 2, '2024-01-08', 1, 120),
('1234567890012', 2, '2024-02-14', 1, 140),
('1234567890013', 2, '2024-03-18', 1, 130),
('1234567890014', 2, '2024-04-22', 1, 110),
('1234567890021', 3, '2024-01-12', 2, 80),
('1234567890022', 3, '2024-02-18', 2, 90),
('1234567890023', 3, '2024-03-22', 2, 85),
('1234567890024', 3, '2024-04-25', 2, 95),
('1234567890031', 4, '2024-01-15', 2, 100),
('1234567890032', 4, '2024-02-20', 2, 120),
('1234567890033', 4, '2024-03-25', 2, 110),
('1234567890034', 4, '2024-04-30', 2, 130),
('1234567890041', 5, '2024-01-20', 1, 140),
('1234567890042', 5, '2024-02-25', 1, 150),
('1234567890043', 5, '2024-03-28', 1, 160),
('1234567890044', 5, '2024-04-30', 1, 130),
('1234567890051', 6, '2024-01-05', 1, 100),
('1234567890052', 6, '2024-02-10', 1, 120),
('1234567890053', 6, '2024-03-15', 1, 130),
('1234567890054', 6, '2024-04-20', 1, 110),
('1234567890061', 7, '2024-01-08', 2, 90),
('1234567890062', 7, '2024-02-12', 2, 100),
('1234567890063', 7, '2024-03-18', 2, 110),
('1234567890064', 7, '2024-04-22', 2, 105),
('1234567890071', 8, '2024-01-12', 2, 70),
('1234567890072', 8, '2024-02-14', 2, 80),
('1234567890073', 8, '2024-03-20', 2, 75),
('1234567890074', 8, '2024-04-24', 2, 85),
('1234567890081', 11, '2024-01-15', 3, 50),
('1234567890082', 11, '2024-02-20', 3, 60),
('1234567890083', 11, '2024-03-25', 3, 70),
('1234567890084', 11, '2024-04-30', 3, 80),
('1234567890091', 12, '2024-01-18', 3, 40),
('1234567890092', 12, '2024-02-22', 3, 50),
('1234567890093', 12, '2024-03-27', 3, 60),
('1234567890094', 12, '2024-04-30', 3, 45);



-- Заполнение таблицы продавцов
INSERT INTO seller (first_name, last_name, phone, email)
VALUES
    ('Иван', 'Котов', '8(495)123-45-67', 'kotov@example.com'),
    ('Анна', 'Пескова', '8(812)222-33-44', 'peskova@example.com'),
    ('Сергей', 'Лисов', '8(495)987-65-43', 'lisov@example.com');
   
-- Заполнение таблицы расположения товара
INSERT INTO product_storage (product_unit_barcode, storage_sale_id, quantity)
VALUES
('1234567890001', 1, 50),
('1234567890002', 2, 60),
('1234567890003', 3, 40),
('1234567890004', 4, 50),
('1234567890011', 1, 30),
('1234567890012', 2, 40),
('1234567890013', 3, 30),
('1234567890014', 4, 20),
('1234567890021', 5, 30),
('1234567890022', 6, 40),
('1234567890023', 7, 30),
('1234567890024', 8, 20),
('1234567890031', 5, 40),
('1234567890032', 6, 50),
('1234567890033', 7, 40),
('1234567890034', 8, 30),
('1234567890041', 9, 60),
('1234567890042', 10, 50),
('1234567890043', 11, 40),
('1234567890044', 12, 30),
('1234567890051', 13, 40),
('1234567890052', 14, 50),
('1234567890053', 15, 30),
('1234567890054', 16, 20),
('1234567890061', 13, 30),
('1234567890062', 14, 40),
('1234567890063', 15, 30),
('1234567890064', 16, 20),
('1234567890071', 17, 30),
('1234567890072', 18, 40),
('1234567890073', 19, 30),
('1234567890074', 20, 20),
('1234567890081', 17, 10),
('1234567890082', 18, 15),
('1234567890083', 19, 20),
('1234567890084', 20, 25),
('1234567890091', 21, 20),
('1234567890092', 21, 15),
('1234567890093', 21, 10),
('1234567890094', 21, 5);

-- Заполнение таблицы чеков
INSERT INTO sale_receipt (seller_id, sale_date)
VALUES
(1, '2024-11-01 09:15:00'),
(2, '2024-11-01 10:30:00'),
(3, '2024-11-01 11:45:00'),
(1, '2024-11-01 14:00:00'),
(1, '2024-11-01 15:15:00'),
(2, '2024-11-01 16:30:00'),
(2, '2024-11-02 09:00:00'),
(3, '2024-11-02 10:15:00'),
(1, '2024-11-02 11:30:00'),
(2, '2024-11-02 12:45:00'),
(1, '2024-11-02 14:00:00'),
(3, '2024-11-03 09:30:00'),
(1, '2024-11-03 11:00:00'),
(2, '2024-11-03 12:15:00'),
(3, '2024-11-03 13:30:00'),
(2, '2024-11-04 10:00:00'),
(3, '2024-11-04 11:45:00'),
(1, '2024-11-05 09:30:00'),
(1, '2024-11-06 14:00:00'),
(2, '2024-11-07 17:30:00');

-- Заполнение таблицы детализации чеков
INSERT INTO sale_receipt_details (receipt_id, product_unit_barcode, quantity)
VALUES
(1, '1234567890001', 2),
(1, '1234567890002', 1),
(1, '1234567890003', 1),
(2, '1234567890021', 1),
(2, '1234567890022', 2),
(2, '1234567890031', 1),
(3, '1234567890041', 1),
(4, '1234567890011', 1),
(4, '1234567890021', 2),
(4, '1234567890031', 1),
(5, '1234567890003', 1),
(5, '1234567890013', 1),
(6, '1234567890051', 2),
(6, '1234567890061', 1),
(7, '1234567890081', 1),
(7, '1234567890091', 2),
(8, '1234567890012', 2),
(9, '1234567890032', 2),
(10, '1234567890063', 1),
(11, '1234567890004', 1),
(12, '1234567890023', 2),
(13, '1234567890014', 1),
(13, '1234567890051', 2),
(14, '1234567890024', 1),
(15, '1234567890034', 1),
(16, '1234567890052', 2),
(17, '1234567890033', 1),
(18, '1234567890042', 2),
(19, '1234567890072', 1),
(20, '1234567890082', 1);

-- Заполнение таблицы мониторинга температуры и влажности в зонах хранения

INSERT INTO storage_zone_conditions (storage_zone_id, temperature, wetness, recorded_at)
VALUES
(1, 18.5, 45.2, '2024-11-01 00:00:00'),
(1, 18.1, 46.0, '2024-11-01 01:00:00'),
(1, 17.9, 46.5, '2024-11-01 02:00:00'),
(1, 17.7, 47.0, '2024-11-01 03:00:00'),
(1, 17.6, 47.5, '2024-11-01 04:00:00'),
(1, 17.4, 48.0, '2024-11-01 05:00:00'),
(1, 17.2, 48.5, '2024-11-01 06:00:00'),
(1, 17.0, 49.0, '2024-11-01 07:00:00'),
(1, 16.8, 49.5, '2024-11-01 08:00:00'),
(1, 16.6, 50.0, '2024-11-01 09:00:00'),
(1, 16.5, 50.5, '2024-11-01 10:00:00'),
(1, 16.3, 51.0, '2024-11-01 11:00:00'),
(1, 16.0, 51.5, '2024-11-01 12:00:00'),
(1, 15.8, 52.0, '2024-11-01 13:00:00'),
(1, 15.6, 52.5, '2024-11-01 14:00:00'),
(1, 15.4, 53.0, '2024-11-01 15:00:00'),
(1, 15.2, 53.5, '2024-11-01 16:00:00'),
(1, 15.0, 54.0, '2024-11-01 17:00:00'),
(1, 14.8, 54.5, '2024-11-01 18:00:00'),
(1, 14.6, 55.0, '2024-11-01 19:00:00'),
(1, 14.4, 55.5, '2024-11-01 20:00:00'),
(1, 14.2, 56.0, '2024-11-01 21:00:00'),
(1, 14.0, 56.5, '2024-11-01 22:00:00'),
(1, 13.8, 57.0, '2024-11-01 23:00:00'),
(2, 22.0, 60.0, '2024-11-01 00:00:00'),
(2, 21.8, 60.5, '2024-11-01 01:00:00'),
(2, 21.7, 61.0, '2024-11-01 02:00:00'),
(2, 21.6, 61.5, '2024-11-01 03:00:00'),
(2, 21.5, 62.0, '2024-11-01 04:00:00'),
(2, 21.3, 62.5, '2024-11-01 05:00:00'),
(2, 21.1, 63.0, '2024-11-01 06:00:00'),
(2, 21.0, 63.5, '2024-11-01 07:00:00'),
(2, 20.8, 64.0, '2024-11-01 08:00:00'),
(2, 20.7, 64.5, '2024-11-01 09:00:00'),
(2, 20.5, 65.0, '2024-11-01 10:00:00'),
(2, 20.3, 65.5, '2024-11-01 11:00:00'),
(2, 20.1, 66.0, '2024-11-01 12:00:00'),
(2, 20.0, 66.5, '2024-11-01 13:00:00'),
(2, 19.8, 67.0, '2024-11-01 14:00:00'),
(2, 19.6, 67.5, '2024-11-01 15:00:00'),
(2, 19.4, 68.0, '2024-11-01 16:00:00'),
(2, 19.2, 68.5, '2024-11-01 17:00:00'),
(2, 19.0, 69.0, '2024-11-01 18:00:00'),
(2, 18.8, 69.5, '2024-11-01 19:00:00'),
(2, 18.6, 70.0, '2024-11-01 20:00:00'),
(2, 18.4, 70.5, '2024-11-01 21:00:00'),
(2, 18.2, 71.0, '2024-11-01 22:00:00'),
(2, 18.0, 71.5, '2024-11-01 23:00:00'),
(3, 10.0, 65.0, '2024-11-01 00:00:00'),
(3, 9.8, 66.0, '2024-11-01 01:00:00'),
(3, 9.6, 66.5, '2024-11-01 02:00:00'),
(3, 9.5, 67.0, '2024-11-01 03:00:00'),
(3, 9.3, 67.5, '2024-11-01 04:00:00'),
(3, 9.0, 68.0, '2024-11-01 05:00:00'),
(3, 8.8, 68.5, '2024-11-01 06:00:00'),
(3, 8.6, 69.0, '2024-11-01 07:00:00'),
(3, 8.5, 69.5, '2024-11-01 08:00:00'),
(3, 8.3, 70.0, '2024-11-01 09:00:00'),
(3, 8.1, 70.5, '2024-11-01 10:00:00'),
(3, 7.9, 71.0, '2024-11-01 11:00:00'),
(3, 7.8, 71.5, '2024-11-01 12:00:00'),
(3, 7.6, 72.0, '2024-11-01 13:00:00'),
(3, 7.4, 72.5, '2024-11-01 14:00:00'),
(3, 7.2, 73.0, '2024-11-01 15:00:00'),
(3, 7.0, 73.5, '2024-11-01 16:00:00'),
(3, 6.8, 74.0, '2024-11-01 17:00:00'),
(3, 6.6, 74.5, '2024-11-01 18:00:00'),
(3, 6.4, 75.0, '2024-11-01 19:00:00'),
(3, 6.2, 75.5, '2024-11-01 20:00:00'),
(3, 6.0, 76.0, '2024-11-01 21:00:00'),
(3, 5.8, 76.5, '2024-11-01 22:00:00'),
(3, 5.6, 77.0, '2024-11-01 23:00:00'),
(4, 25.0, 40.0, '2024-11-01 00:00:00'),
(4, 24.8, 41.5, '2024-11-01 01:00:00'),
(4, 24.5, 43.0, '2024-11-01 02:00:00'),
(4, 24.3, 44.0, '2024-11-01 03:00:00'),
(4, 24.1, 45.0, '2024-11-01 04:00:00'),
(4, 23.9, 46.0, '2024-11-01 05:00:00'),
(4, 23.7, 47.0, '2024-11-01 06:00:00'),
(4, 23.5, 48.0, '2024-11-01 07:00:00'),
(4, 23.3, 49.0, '2024-11-01 08:00:00'),
(4, 23.1, 50.0, '2024-11-01 09:00:00'),
(4, 22.9, 51.0, '2024-11-01 10:00:00'),
(4, 22.7, 52.0, '2024-11-01 11:00:00'),
(4, 22.5, 53.0, '2024-11-01 12:00:00'),
(4, 22.3, 54.0, '2024-11-01 13:00:00'),
(4, 22.1, 55.0, '2024-11-01 14:00:00'),
(4, 21.9, 56.0, '2024-11-01 15:00:00'),
(4, 21.7, 57.0, '2024-11-01 16:00:00'),
(4, 21.5, 58.0, '2024-11-01 17:00:00'),
(4, 21.3, 59.0, '2024-11-01 18:00:00'),
(4, 21.1, 60.0, '2024-11-01 19:00:00'),
(4, 20.9, 61.0, '2024-11-01 20:00:00'),
(4, 20.7, 62.0, '2024-11-01 21:00:00'),
(4, 20.5, 63.0, '2024-11-01 22:00:00'),
(4, 20.3, 64.0, '2024-11-01 23:00:00'),
(5, 5.0, 80.0, '2024-11-01 00:00:00'),
(5, 4.8, 81.0, '2024-11-01 01:00:00'),
(5, 4.6, 82.0, '2024-11-01 02:00:00'),
(5, 4.5, 83.0, '2024-11-01 03:00:00'),
(5, 4.3, 84.0, '2024-11-01 04:00:00'),
(5, 4.1, 85.0, '2024-11-01 05:00:00'),
(5, 3.9, 86.0, '2024-11-01 06:00:00'),
(5, 3.8, 87.0, '2024-11-01 07:00:00'),
(5, 3.6, 88.0, '2024-11-01 08:00:00'),
(5, 3.4, 89.0, '2024-11-01 09:00:00'),
(5, 3.2, 90.0, '2024-11-01 10:00:00'),
(5, 3.0, 91.0, '2024-11-01 11:00:00'),
(5, 2.8, 92.0, '2024-11-01 12:00:00'),
(5, 2.7, 93.0, '2024-11-01 13:00:00'),
(5, 2.5, 94.0, '2024-11-01 14:00:00'),
(5, 2.3, 95.0, '2024-11-01 15:00:00'),
(5, 2.1, 96.0, '2024-11-01 16:00:00'),
(5, 1.9, 97.0, '2024-11-01 17:00:00'),
(5, 1.8, 98.0, '2024-11-01 18:00:00'),
(5, 1.6, 99.0, '2024-11-01 19:00:00'),
(5, 1.4, 100.0, '2024-11-01 20:00:00'),
(5, 1.2, 100.0, '2024-11-01 21:00:00'),
(5, 1.0, 100.0, '2024-11-01 22:00:00'),
(5, 0.8, 100.0, '2024-11-01 23:00:00'),
(6, -10.0, 30.0, '2024-11-01 00:00:00'),
(6, -9.8, 31.0, '2024-11-01 01:00:00'),
(6, -9.5, 32.0, '2024-11-01 02:00:00'),
(6, -9.3, 33.0, '2024-11-01 03:00:00'),
(6, -9.0, 34.0, '2024-11-01 04:00:00'),
(6, -8.8, 35.0, '2024-11-01 05:00:00'),
(6, -8.5, 36.0, '2024-11-01 06:00:00'),
(6, -8.3, 37.0, '2024-11-01 07:00:00'),
(6, -8.0, 38.0, '2024-11-01 08:00:00'),
(6, -7.8, 39.0, '2024-11-01 09:00:00'),
(6, -7.6, 40.0, '2024-11-01 10:00:00'),
(6, -7.4, 41.0, '2024-11-01 11:00:00'),
(6, -7.2, 42.0, '2024-11-01 12:00:00'),
(6, -7.0, 43.0, '2024-11-01 13:00:00'),
(6, -6.8, 44.0, '2024-11-01 14:00:00'),
(6, -6.6, 45.0, '2024-11-01 15:00:00'),
(6, -6.4, 46.0, '2024-11-01 16:00:00'),
(6, -6.2, 47.0, '2024-11-01 17:00:00'),
(6, -6.0, 48.0, '2024-11-01 18:00:00'),
(6, -5.8, 49.0, '2024-11-01 19:00:00'),
(6, -5.6, 50.0, '2024-11-01 20:00:00'),
(6, -5.4, 51.0, '2024-11-01 21:00:00'),
(6, -5.2, 52.0, '2024-11-01 22:00:00'),
(6, -5.0, 53.0, '2024-11-01 23:00:00');

--  Заполнение таблицы списания товара
INSERT INTO product_write_off (product_unit_barcode, quantity, write_off_reason, write_off_date, recorded_by, storage_sale_id)
VALUES
    ('1234567890001', 10, 'Повреждение', '2024-10-29 10:30:00', 1, 2),
    ('1234567890002', 5, 'Просрочка', '2024-10-29 11:45:00', 2, 3),
    ('1234567890003', 15, 'Невостребованный', '2024-10-29 13:00:00', 3, 1),
    ('1234567890004', 7, 'Ошибочный', '2024-10-29 14:15:00', 2, 4),
    ('1234567890011', 20, 'Другие', '2024-10-29 16:00:00', 1, 5),
    ('1234567890012', 8, 'Повреждение', '2024-11-01 09:00:00', 1, 2),
    ('1234567890013', 6, 'Просрочка', '2024-11-01 11:30:00', 2, 3),
    ('1234567890014', 12, 'Невостребованный', '2024-11-01 13:45:00', 3, 4),
    ('1234567890021', 5, 'Ошибочный', '2024-11-01 15:20:00', 1, 5),
    ('1234567890022', 15, 'Другие', '2024-11-01 17:00:00', 2, 1),
    ('1234567890023', 10, 'Повреждение', '2024-11-02 08:30:00', 3, 2),
    ('1234567890024', 4, 'Просрочка', '2024-11-02 10:00:00', 1, 3),
    ('1234567890031', 9, 'Невостребованный', '2024-11-02 12:15:00', 2, 4),
    ('1234567890032', 20, 'Ошибочный', '2024-11-02 14:00:00', 3, 5),
    ('1234567890033', 7, 'Другие', '2024-11-02 16:30:00', 1, 1),
    ('1234567890034', 11, 'Повреждение', '2024-11-03 09:45:00', 2, 2),
    ('1234567890041', 3, 'Просрочка', '2024-11-03 11:00:00', 3, 3),
    ('1234567890042', 14, 'Невостребованный', '2024-11-03 13:30:00', 1, 4),
    ('1234567890043', 6, 'Ошибочный', '2024-11-03 15:15:00', 2, 5),
    ('1234567890044', 18, 'Другие', '2024-11-03 17:50:00', 3, 1);
   
--  Заполнение таблицы заявок
INSERT INTO purchase_order (seller_id, provider_id, date_of_request, date_of_compilation, date_of_delivery, order_comment, status)
VALUES
    (1, 1, '2024-11-02', '2024-11-02', '2024-11-05', 'Заявка на корма для собак', 'Новый'),
    (2, 2, '2024-11-01', '2024-11-01', '2024-11-06', 'Заявка на корма для кошек', 'Новый'),
    (3, 3, '2024-10-31', '2024-10-31', '2024-11-07', 'Заявка на игрушки для собак', 'Новый'),
    (1, 1, '2024-10-26', '2024-10-26', '2024-10-31', 'Заявка на корм для кошек', 'Заказ отправлен'),
    (2, 2, '2024-10-27', '2024-10-27', '2024-11-04', 'Заявка на игрушки для собак', 'В пути'),
    (3, 3, '2024-10-28', '2024-10-28', '2024-11-01', 'Заявка на лекарства для кошек', 'Доставлен');
   
--  Заполнение таблицы детализации заявок
INSERT INTO purchase_order_detailed (purchase_id, catalog_product_id, quantity)
VALUES
    (1, 1, 20),
    (1, 2, 15),
    (2, 6, 25),
    (2, 7, 18),
    (3, 11, 12),
    (3, 13, 10),
    (4, 6, 20),
    (4, 7, 15),
    (5, 11, 10),
    (5, 13, 8),
    (5, 15, 6),
    (6, 17, 25),
    (6, 19, 12),
    (6, 20, 10);

-----------------------------------------------------------
-- Создадим индексы для ускорения запросов
   
-- Индекс на поле product_name для ускорения поиска по названию товара
CREATE INDEX IF NOT EXISTS idx_catalog_product_name ON catalog_product (product_name);

-- Сдвоенный индекс на поля price и id для быстрого доступа к товарам по цене и идентификатору
CREATE INDEX IF NOT EXISTS idx_catalog_product_price_id ON catalog_product (price, id);

-- Индекс на поле barcode для быстрого поиска по штрих-коду
CREATE INDEX IF NOT EXISTS idx_product_unit_barcode ON product_unit (barcode);

-- Индекс на поле catalog_id для ускорения соединений с таблицей catalog_product
CREATE INDEX IF NOT EXISTS idx_product_unit_catalog_id ON product_unit (catalog_id);
-----------------------------------------------------------
-- Проверка и правка данных:

-- Выведем товары, которые есть в базе, но не для всех указано место хранения

SELECT
    pu.barcode,
    cp.product_name AS catalog_product,
    pu.lot_count - COALESCE(SUM(ps.quantity), 0) AS missing_quantity
FROM
    product_unit pu
JOIN
    catalog_product cp ON pu.catalog_id = cp.id
LEFT JOIN
    product_storage ps ON pu.barcode = ps.product_unit_barcode
GROUP BY
    pu.barcode, cp.product_name, pu.lot_count
HAVING
    pu.lot_count <> COALESCE(SUM(ps.quantity), 0)
ORDER BY
    missing_quantity desc
LIMIT 50;



-- Внесем все товары, которые есть в базе, но не размещены в ячейках хранения, в ячейку с id 1.
-- Если товар уже там хранится, то нужно увеличить его количество.

WITH total_quantities AS (
    SELECT
        pu.barcode,
        pu.lot_count AS total_lot_count,
        COALESCE(SUM(ps.quantity), 0) AS total_quantity -- Суммируем количество товара из всех ячеек
    FROM
        product_unit pu
    LEFT JOIN
        product_storage ps ON pu.barcode = ps.product_unit_barcode
    GROUP BY
        pu.barcode, pu.lot_count
),
difference AS (
    SELECT
        tq.barcode,
        tq.total_lot_count - tq.total_quantity AS diff -- Вычисляем недостающее количество
    FROM
        total_quantities tq
    WHERE
        tq.total_lot_count > tq.total_quantity -- Только товары с недостачей
)
-- Вставляем или обновляем данные в ячейке хранения с ID = 1
INSERT INTO product_storage (product_unit_barcode, storage_sale_id, quantity)
SELECT
    d.barcode,
    1 AS storage_sale_id, -- Ячейка хранения с ID = 1
    d.diff AS quantity -- Количество недостающих товаров
FROM
    difference d
WHERE
    d.diff > 0 -- Только товары с положительной разницей
ON CONFLICT (product_unit_barcode, storage_sale_id)
DO UPDATE SET
    quantity = product_storage.quantity + EXCLUDED.quantity; -- Увеличиваем количество в ячейке
    
-- Проверим, что данные добавились и теперь расхождений нет   
SELECT
    pu.barcode,
    cp.product_name AS catalog_product,
    pu.lot_count - COALESCE(SUM(ps.quantity), 0) AS missing_quantity
FROM
    product_unit pu
JOIN
    catalog_product cp ON pu.catalog_id = cp.id
LEFT JOIN
    product_storage ps ON pu.barcode = ps.product_unit_barcode
GROUP BY
    pu.barcode, cp.product_name, pu.lot_count
HAVING
    pu.lot_count <> COALESCE(SUM(ps.quantity), 0)
ORDER BY
    missing_quantity DESC
LIMIT 100;
   
-------------------------------------------

   
-- Посмотрим на общее количество товаров по категориям:
SELECT
    c.name AS category_name,
    cp.product_name,
    SUM(pu.lot_count) AS total_lot_count
FROM
    category c
JOIN
    catalog_product cp ON c.id = cp.category_id
JOIN
    product_unit pu ON cp.id = pu.catalog_id
GROUP BY
    c.name, cp.product_name
ORDER BY
	c.name ASC,
	cp.product_name ASC,
    total_lot_count desc
LIMIT 100;


-- Посмотрим среднюю цену товаров по категориям:
SELECT
    c.name AS category_name,
    ROUND(AVG(cp.price), 2) AS avg_price
FROM
    catalog_product cp
JOIN
    category c ON cp.category_id = c.id
GROUP BY
    c.name
ORDER BY
    avg_price DESC
LIMIT 100;


-- Выведем 10 самых дорогих товаров
SELECT
    product_name,
    price,
    product_brand
FROM
    catalog_product
ORDER BY
    price DESC
LIMIT 10;
   
-- Выведем список товаров, у которых в составе есть Овощи или Злаки:
SELECT
    product_name,
    ingredients
FROM
    catalog_product cp
WHERE
    ('Злаки' = ANY(cp.ingredients) OR 'Овощи' = ANY(cp.ingredients))
LIMIT 100;
   
-- Выведем только те, которые есть в наличии, и у которых в составе есть Мясо
SELECT
    cp.product_name,
    cp.ingredients,
    SUM(pu.lot_count) AS total_in_stock
FROM
    catalog_product cp
JOIN
    product_unit pu ON cp.id = pu.catalog_id
WHERE
    'Мясо' = ANY(cp.ingredients)
GROUP BY
    cp.product_name, cp.ingredients
HAVING
    SUM(pu.lot_count) > 0
ORDER BY
    total_in_stock desc
LIMIT 20;


-- Выведем список товаров, у которых в ближайшие три месяца истечет срок годности.
-- Отсортируем от товара, срок годности которого истечет раньше всех, к товарам, у которых позже.
SELECT 
    cp.product_name, 
    pu.barcode, 
    pu.date_production, 
    cp.storage_life, 
    pu.lot_count
FROM 
    product_unit pu
JOIN 
    catalog_product cp ON pu.catalog_id = cp.id
WHERE 
    pu.date_production + cp.storage_life BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '3 months'
ORDER BY 
    pu.date_production + cp.storage_life asc
LIMIT 20;
   
-- Выведем топ-3 продавцов по убыванию суммы продаж за период с 01.11.2024 по 07.11.2024

SELECT
    CONCAT(s.first_name, ' ', s.last_name) AS seller_name,
    SUM(srd.quantity * cp.price) AS total_sales
FROM
    sale_receipt sr
JOIN
    sale_receipt_details srd ON sr.id = srd.receipt_id
JOIN
    product_unit pu ON srd.product_unit_barcode = pu.barcode
JOIN
    catalog_product cp ON pu.catalog_id = cp.id
JOIN
    seller s ON sr.seller_id = s.id
WHERE
    sr.sale_date BETWEEN '2024-11-01' AND '2024-11-07'
GROUP BY
    s.id, s.first_name, s.last_name
ORDER BY
    total_sales DESC
LIMIT 3;


-- Выведем топ-5 самых продаваемых товаров
SELECT
    cp.product_name,
    SUM(srd.quantity) AS total_sold
FROM
    sale_receipt_details srd
JOIN
    product_unit pu ON srd.product_unit_barcode = pu.barcode
JOIN
    catalog_product cp ON pu.catalog_id = cp.id
GROUP BY
    cp.product_name
ORDER BY
    total_sold DESC
LIMIT 5;

-- Выведем товары по убыванию суммы продаж за период с 01.11.2024 по 07.11.2024
SELECT
    cp.product_name AS product_name,
    SUM(srd.quantity) AS total_quantity_sold,
    SUM(srd.quantity * cp.price) AS total_sales
FROM
    sale_receipt sr
JOIN
    sale_receipt_details srd ON sr.id = srd.receipt_id
JOIN
    product_unit pu ON srd.product_unit_barcode = pu.barcode
JOIN
    catalog_product cp ON pu.catalog_id = cp.id
WHERE
    sr.sale_date BETWEEN '2024-11-01' AND '2024-11-07'
GROUP BY
    cp.product_name
ORDER BY
    total_sales DESC 
LIMIT 20;


-- Зоны хранения с наибольшим количеством товаров
SELECT
    sz.name AS storage_zone_name,
    SUM(ps.quantity) AS total_quantity
FROM
    storage_zone sz
JOIN
    storage_sale ss ON sz.id = ss.storage_zone_id
JOIN
    product_storage ps ON ss.id = ps.storage_sale_id
GROUP BY
    sz.name
ORDER BY
    total_quantity desc
LIMIT 20;

-- Выведем товары, которые списывались и по какой причине, количество единиц и отсортируем по убыванию общей суммы списания
SELECT
    cp.product_name AS product_name,
    pwo.write_off_reason AS reason,
    SUM(pwo.quantity) AS total_quantity_written_off,
    SUM(pwo.quantity * cp.price) AS total_write_off_cost
FROM
    product_write_off pwo
JOIN
    product_unit pu ON pwo.product_unit_barcode = pu.barcode
JOIN
    catalog_product cp ON pu.catalog_id = cp.id
GROUP BY
    cp.product_name, pwo.write_off_reason
ORDER BY
    total_write_off_cost DESC
LIMIT 20;

-- Выведем дату, время, название зоны, температуру и влажность, когда темепратура и влажность в зоне не соответсвовали требуемому диапазону
SELECT
    szc.recorded_at::DATE AS date,
    szc.recorded_at::TIME AS time,
    sz.name AS storage_zone_name,
    szc.temperature,
    szc.wetness,
    sz.temperature_range,
    sz.wetness_range
FROM
    storage_zone_conditions szc
JOIN
    storage_zone sz ON szc.storage_zone_id = sz.id 
WHERE
    NOT (szc.temperature <@ sz.temperature_range AND szc.wetness <@ sz.wetness_range)
ORDER BY
    sz.name,
    szc.recorded_at::DATE,
    szc.recorded_at::TIME
LIMIT 100;

-- Теперь выведем только те дни, когда средние значения температуры и влажности не соответствовали требованиям
SELECT
    szc.recorded_at::DATE AS date,
    sz.name AS storage_zone_name,
    ROUND(AVG(szc.temperature), 1) AS avg_temperature,
    ROUND(AVG(szc.wetness), 1) AS avg_wetness,
    sz.temperature_range,
    sz.wetness_range
FROM
    storage_zone_conditions szc
JOIN
    storage_zone sz ON szc.storage_zone_id = sz.id
GROUP BY
    szc.recorded_at::DATE,
    sz.name,
    sz.temperature_range,
    sz.wetness_range
HAVING
    NOT (AVG(szc.temperature) <@ sz.temperature_range AND AVG(szc.wetness) <@ sz.wetness_range)
ORDER BY
    sz.name,
    date
LIMIT 10;


-- Посчитаем количество заявок поставщикам в каждом статусе
SELECT
    po.status,
    COUNT(*) AS order_count
FROM
    purchase_order po
GROUP BY
    po.status
ORDER BY
    order_count desc
LIMIT 4;

-- Выведем товары, которые больше всего заказывали
SELECT
    cp.product_name,
    SUM(pod.quantity) AS total_quantity_ordered
FROM
    purchase_order_detailed pod
JOIN
    catalog_product cp ON pod.catalog_product_id = cp.id
GROUP BY
    cp.product_name
ORDER BY
    total_quantity_ordered DESC
LIMIT 10;